Solve each of these problems without using recursion, but instead using map, filter, and/or reduce.  Note that you may need to also perform some operations on the results of the map, filter, and/or reduce calls, but these should also not require recursion.

Write a function average that takes a list of numbers and returns their average.

Write a function noZeroLists that takes a list of lists and removes any inner lists that contain at least one 0 in them.  For example, noZeroLists([[1,2,3], [4,0,5], [], [1,1,1], [0,1,2]]) returns [[1,2,3], [], [1,1,1]].  Python's "in" operator for checking whether a value is in a list will be useful.

Write a function intersect that takes two lists l1 and l2 and returns a list identical to l1 but with all elements of l2 removed.  THAT IS NOT WHAT INTERSECTION SHOULD DO! RENAME AS SET DIFFERENCE AND MAKE SURE THE IMPL IS CORRECT For example, intersect([1,2,3], [2,4,6]) is [1,3].  Python's "in" operator for checking whether a value is in a list will be useful.

Write a function innerMultiply that multiplies all elements of a list of lists by a given number.  For example, innerMultiply([[1,2,3], [4,5]], 10) returns [[10,20,30], [40,50]].

Professor Puzzler is a crossword enthusiast. He has a long list of words that might appear in a crossword puzzle, but he has trouble finding the ones that fit a slot. Write a function crosswordFind to help him. The expression crosswordFind(letter, inPosition, len, words) should return all the items from words which (a) are of the given length and (b) have letter in the position inPosition. For example, if Puzzler is looking for seven-letter words that have 'k' in position 1, he can evaluate the expression:  crosswordFind('k', 1, 7, ["funky", "fabulous", "kite", "icky", "ukelele"]) which returns ["ukelele"].

Write a function wordCount that returns the number of occurrences of a given word (a string) in a list of sentences, where each sentence is represented as a list of words.  For example, wordCount("you", [["hello", "there", "you", "how", "are", "you"], ["fine", "and", "you"]]) returns 3.

Professor Pennypincher will not buy anything if he has to pay more than 200 dollars. But, as a member of the Generous Teachers Society, he gets a 10% discount on anything he buys. Write a function pennypincher that takes a list of prices and returns the total amount that Professor Pennypincher would have to pay, if he bought everything that was cheap enough for him.  For example, pennypincher([100, 150, 200, 210, 250]) returns 594.0.

Write a function named rmChar that removes all occurrences of a given character from a given string.  For example, rmChar("a", "banana") returns "bnn".  You may want to convert the string to a list of characters using Python's "list" function.

