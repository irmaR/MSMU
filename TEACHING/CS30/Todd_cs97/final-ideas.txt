

count(p, l) [see 131 midterm in 2013]
maybe too similar to count(v, l) to count occurrences of v in l
instead do it as a sum?  can use the sum function for the third one.

better:  kGreaterThanN() or numAboveN()
	- first returns a boolean, second the count

better: sumToK(k, l)
	- return the number of inner lists that sum to k

- first using recursion
- then with a loop
- then without either, instead using map/filter/reduce
	and potentially other stuff

what is the first argument passed to p?
- can ask this for each of the first two
	- turns out to be the same!
	- unless they implement count recursively in an odd way

----

Write a function swap that swaps a pair.
Write a function swap that swaps two integers (but you can't).

def f1():
	l1 = [1,2,3]
	l2 = [1,2,3]
	???
	return l2

def f2():
	l1 = [1,2,3]
	l2 = l1
	???
	return l2

Fill in ??? as a single assignment statement such that they return different values.  What are those values?

Or give it multiple choice.

----

An example with an if-elif-else versus an if-if-else.  Ask for the difference in behavior, or an input that causes a different behavior?

